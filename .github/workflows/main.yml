name: Build freqmon with custom rtl-sdr (Windows only)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    # Установка MSYS2 для Windows (включает MinGW)
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        install: >-
          base-devel
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-gcc-libs
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-pkg-config
          mingw-w64-x86_64-libusb
          mingw-w64-x86_64-SDL2
          mingw-w64-x86_64-SDL2_ttf
          git
          mingw-w64-x86_64-make
          autoconf
          automake
          libtool
        update: true

    # Кэширование kissfft
    - name: Cache kissfft
      id: cache-kissfft
      uses: actions/cache@v4
      with:
        path: |
          /mingw64/lib/libkissfft-float.a
          /mingw64/include/kiss_fft.h
          /mingw64/include/kiss_fftr.h
        key: ${{ runner.os }}-kissfft-20241219

    # Установка kissfft вручную (исправленная версия)
    - name: Install kissfft manually
      if: steps.cache-kissfft.outputs.cache-hit != 'true'
      shell: msys2 {0}
      run: |
        echo "Installing kissfft manually..."
        git clone https://github.com/mborgerding/kissfft.git  
        cd kissfft
        # Создаем директорию для объектных файлов
        mkdir -p obj
        # Компилируем основные файлы
        gcc -O3 -fPIC -I. -c kiss_fft.c -o obj/kiss_fft.o
        gcc -O3 -fPIC -I. -c kiss_fftr.c -o obj/kiss_fftr.o
        # Создаем библиотеку
        ar rcs libkissfft-float.a obj/kiss_fft.o obj/kiss_fftr.o
        # Устанавливаем
        cp libkissfft-float.a /mingw64/lib/
        cp kiss_fft.h /mingw64/include/
        cp kiss_fftr.h /mingw64/include/
        echo "kissfft installed successfully"

    # Кэширование liquid-dsp
    - name: Cache liquid-dsp
      id: cache-liquid-dsp
      uses: actions/cache@v4
      with:
        path: |
          /mingw64/lib/libliquid.a
          /mingw64/include/liquid/
        key: ${{ runner.os }}-liquid-dsp-20241219

    # Установка liquid-dsp вручную (исправленная версия)
    - name: Install liquid-dsp manually
      if: steps.cache-liquid-dsp.outputs.cache-hit != 'true'
      shell: msys2 {0}
      run: |
        echo "Installing liquid-dsp manually..."
        git clone https://github.com/jgaeddert/liquid-dsp.git  
        cd liquid-dsp
        sed -i '/target_link_libraries.*c m/d' CMakeLists.txt
        mkdir build
        cd build
        cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/mingw64 -DBUILD_SHARED_LIBS=OFF -DBUILD_EXAMPLES=OFF -DBUILD_AUTOTESTS=OFF -DBUILD_BENCHMARKS=OFF
        cmake --build . -j$(nproc)
        cmake --install .
        echo "liquid-dsp installed successfully"

    # Загрузка и установка custom rtl-sdr
    - name: Download and build custom rtl-sdr
      if: steps.cache-rtl-sdr.outputs.cache-hit != 'true'
      shell: msys2 {0}
      run: |
        echo "Cloning custom rtl-sdr..."
        git clone https://gitea.osmocom.org/sultanqasim/rtl-sdr.git  
        if [ $? -ne 0 ]; then
          echo "Error: Failed to clone rtl-sdr repository"
          exit 1
        fi
        cd rtl-sdr
        echo "Checking out fast_retune branch..."
        git checkout fast_retune
        if [ $? -ne 0 ]; then
          echo "Error: Failed to checkout fast_retune branch"
          exit 1
        fi
        mkdir build
        cd build
        echo "Configuring rtl-sdr with CMake..."
        cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/mingw64 -DBUILD_SHARED_LIBS=OFF
        if [ $? -ne 0 ]; then
          echo "Error: CMake configuration failed"
          exit 1
        fi
        echo "Building rtl-sdr..."
        make -j$(nproc)
        if [ $? -ne 0 ]; then
          echo "Error: Build failed"
          exit 1
        fi
        echo "Installing rtl-sdr..." # Выводим сообщение перед установкой
        # Выполняем make install в отдельной команде, чтобы избежать проблем с завершением
        # shell: msys2 {0} гарантирует выполнение в правильной среде
        echo "Running make install..."
        make install
        if [ $? -ne 0 ]; then
          echo "Error: Installation failed"
          exit 1
        fi
        echo "Installation command completed."

    # Проверка наличия установленных файлов (отдельный шаг)
    - name: Verify rtl-sdr installation
      shell: msys2 {0}
      run: |
        echo "Checking for installed files..."
        if [ ! -f "/mingw64/include/rtl-sdr.h" ]; then
          echo "Error: rtl-sdr.h was not installed correctly or not found in /mingw64/include/"
          echo "Listing contents of /mingw64/include/:"
          ls -la /mingw64/include/ | grep -i rtl
          echo "Listing contents of /mingw64/lib/:"
          ls -la /mingw64/lib/ | grep -i rtl
          exit 1
        else
          echo "rtl-sdr.h found at /mingw64/include/"
        fi
        if [ ! -f "/mingw64/lib/librtlsdr.a" ]; then
          echo "Error: librtlsdr.a was not installed correctly or not found in /mingw64/lib/"
          echo "Listing contents of /mingw64/lib/:"
          ls -la /mingw64/lib/ | grep -i rtl
          echo "Listing contents of /mingw64/include/:"
          ls -la /mingw64/include/ | grep -i rtl
          exit 1
        else
          echo "librtlsdr.a found at /mingw64/lib/"
        fi
        echo "rtl-sdr installation verified successfully."


    # Сборка freqmon
    - name: Compile freqmon
      shell: msys2 {0}
      run: |
        g++ -O3 -march=native -ffast-math -std=c++23 -o freqmon.exe freqmon.cpp \
          -lrtlsdr -lkissfft-float -lpthread -lliquid -fpermissive -lSDL2 -lSDL2_ttf \
          -I/mingw64/include -L/mingw64/lib

    # Загрузка артефактов
    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: freqmon-${{ runner.os }}
        path: |
          freqmon.exe
